# Edit this configuration file to define what should be installed on
# your system.  Help is available in the configuration.nix(5) man page
# and in the NixOS manual (accessible by running ‘nixos-help’).

{ config, pkgs, lib, modulesPath, ... }:

{
  imports =
    [
      # Include the default lxd configuration.
      "${modulesPath}/virtualisation/lxc-container.nix"
      # Include the container-specific autogenerated configuration.
      #./lxd.nix - this has to be commented out from the system tarball
      ./my-services/transmission.nix
      ./my-services/radarr.nix
      ./my-services/sonarr.nix
      # ./my-services/plex.nix
      ./my-services/prowlarr.nix
      ./my-services/jellyseerr.nix
      ./my-services/jackett.nix
      ./my-services/lidarr.nix
      ./my-services/readarr.nix
    ];

config.virtualisation.oci-containers = {
    enable = true;
    containers = {
      xteve = {
        image = "alturismo/xteve_guide2go:latest"; # Replace with your Docker image
        ports = [ "34400:34400" ]; # Map host port 8080 to container port 80
        #environment = {
        #  VAR1 = "value1"; # Add any environment variables your container needs
        #};
        #volumes = [ "/path/on/host:/path/in/container" ]; # Bind host paths to container paths
      };
    };
  };    
  # Workaroound for VSCode Remote Server
  programs.nix-ld = {
    enable = true;
  };
  
  users.groups.Media = {
    gid = 1001;
  };

  boot.isContainer = true;
  # I had to suppress these units, since they do not work inside LXC
  systemd.suppressedSystemUnits = [
    "dev-mqueue.mount"
    "sys-kernel-debug.mount"
    "sys-fs-fuse-connections.mount"
  ];

  nix = {
    package = pkgs.nixVersions.stable;
    extraOptions = ''
      experimental-features = nix-command flakes
    '';
    settings.trusted-users = ["@wheel"];
  };

  nixpkgs.config.allowUnfree = true;

  networking = {
    dhcpcd.enable = false;
    useDHCP = false;
    useHostResolvConf = false;
  };

  systemd.network = {
    enable = true;
    networks."50-eth0" = {
      matchConfig.Name = "eth0";
      networkConfig = {
        DHCP = "ipv4";
        IPv6AcceptRA = true;
      };
      linkConfig.RequiredForOnline = "routable";
    };
  };

  environment.systemPackages = with pkgs; [
#    man
    git
    htop
    iftop
    ncdu
    pciutils
    rclone
    screen
    wget
    nixd
  ];
  

  system.stateVersion = "24.05"; # Did you read the comment?
}
